[{"id":"e87fb0a3.9981f","type":"tab","label":"MDML","disabled":false,"info":"Manufacturing Data & Machine Learning Layer"},{"id":"cc05686e.38f588","type":"tab","label":"Tools","disabled":false,"info":"Tools for working with node-red and the data layer."},{"id":"72790cbd.ec4d64","type":"tab","label":"Benchmarking","disabled":false,"info":""},{"id":"ab3bf1e3.b303a","type":"subflow","name":"Archiving","info":"","category":"MDML","in":[{"x":80,"y":220,"wires":[{"id":"9d3e23da.182de"}]}],"out":[],"env":[]},{"id":"b444b0d7.19cc9","type":"subflow","name":"InfluxDB","info":"","category":"MDML","in":[{"x":160,"y":240,"wires":[{"id":"cfee3408.f0c768"}]}],"out":[],"env":[]},{"id":"70fe595b.4aa5c8","type":"subflow","name":"Writing to filesystem","info":"","category":"MDML","in":[{"x":160,"y":200,"wires":[{"id":"fa8868a0.4967c8"}]}],"out":[],"env":[]},{"id":"3665fcdd.57c5f4","type":"subflow","name":"Video Streaming","info":"","category":"MDML","in":[{"x":80,"y":520,"wires":[{"id":"1ff4562.37e26aa"},{"id":"c9776831.965f58"},{"id":"847d6851.bb0ae8"}]}],"out":[{"x":875.6249847412109,"y":657.4999914169312,"wires":[{"id":"bb3a8f90.36f13","port":1}]}],"env":[],"color":"#DDAA99"},{"id":"831f119b.483c2","type":"subflow","name":"Query data & Submit to Func-X","info":"","category":"","in":[{"x":60,"y":60,"wires":[{"id":"3343d8c1.fb7628"},{"id":"6ceaee66.481d3"}]}],"out":[{"x":1220,"y":600,"wires":[{"id":"fbb89d74.29271","port":0}]}],"env":[],"color":"#DDAA99"},{"id":"d5e2a103.5371c","type":"subflow","name":"End experiment/Reset MDML","info":"","category":"","in":[{"x":70,"y":200,"wires":[{"id":"c1246093.5a8cc"}]}],"out":[{"x":1060,"y":180,"wires":[{"id":"d52f4e89.6cfcb","port":0}]},{"x":1060,"y":280,"wires":[{"id":"d52f4e89.6cfcb","port":1}]}],"env":[],"color":"#DDAA99"},{"id":"a98579fa.409578","type":"mqtt-broker","z":"","name":"Mosquitto Subscriber","broker":"mosquitto","port":"1883","clientid":"NodeRED_subscriber","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"2","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"df6e2d21.c3f38","type":"websocket-listener","z":"","path":"/PLIF","wholemsg":"false"},{"id":"8f932cd7.3efac","type":"mqtt-broker","z":"","name":"Publish errors","broker":"mosquitto","port":"1883","clientid":"NodeRED_publisher","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"18be395a.563767","type":"influxdb","z":"","hostname":"influxdb","port":"8086","protocol":"http","database":"merf","name":"MDML InfluxDB","usetls":false,"tls":""},{"id":"85d62ac2.197038","type":"influxdb","z":"","hostname":"sys_influxdb","port":"8087","protocol":"http","database":"merf","name":"MDML SYS InfluxDB","usetls":false,"tls":""},{"id":"ed377597.38bed8","type":"mqtt in","z":"e87fb0a3.9981f","name":"MDML/#","topic":"MDML/#","qos":"2","datatype":"auto","broker":"a98579fa.409578","x":100,"y":220,"wires":[["9a88ea43.6bc658"]]},{"id":"9a88ea43.6bc658","type":"function","z":"e87fb0a3.9981f","name":"Parse message topic","func":"// console.log(msg)\n\n// Adding arrival time for benchmarking\nvar unix_time = Date.now()\nmsg.node_red_arrival_time = unix_time\nmsg.msg_size = JSON.stringify(msg.payload).length;\n\ntry {\n    // Deconstruct message\n    var topic_parts = msg.topic.split('/');\n    \n    // Separate parts of the message topic\n    msg.building = topic_parts[0];\n    msg.experiment = topic_parts[1];\n    msg.action = topic_parts[2];\n    // DATA messages have 4 parts to a topic\n    if (topic_parts.length === 4) {\n        msg.sensor = topic_parts[3];\n    }\n    \n    // Get all valid experiment tags\n    var valid_experiments = global.get('experiments');\n    // Check for valid experiment tag\n    if (Object.keys(valid_experiments).indexOf(msg.experiment) < 0) {\n        throw \"Experiment ID not valid. Contact manufacturing@anl.gov \" +\n        \"to receive an Experiment ID that will allow you to access MDML features.\" \n        return;\n    }\n    \n    // Check for a valid action\n    var valid_actions = [\"CONFIG\", \"DATA\", \"FUNCX\", \"RESET\", \"RESULTS\"];\n    if (valid_actions.indexOf(msg.action) < 0) {\n        throw 'Invalid action in topic. Action must be \"CONFIG\", \"DATA\", \"FUNCX\", or \"RESET\".' \n    }\n    \n    // Pass message on if it is a config message\n    if (msg.action === \"CONFIG\" || msg.action === \"RESULTS\") {\n        return msg;\n    } else if (global.keys().indexOf(msg.experiment) >= 0) {\n    // Checking for experiment configuration\n        if (msg.action == \"DATA\") {\n            valid_devices = global.get(msg.experiment).experiment.experiment_devices\n            // Check the device is valid for this experiment\n            if (valid_devices.indexOf(msg.sensor) < 0) {\n                throw \"Invalid device ID. This device is not listed in your configuration.\"\n            } else {\n                // Pass the message on\n                return msg;\n            }\n        } else if (msg.action == \"RESET\" | msg.action == \"FUNCX\") {\n            // Pass the message on\n            return msg;\n        }\n    }\n    \n    // Return null if msg was not returned yet\n    throw \"No configuration found. You must create one before using any other actions.\"\n} catch (err) {\n    console.log(msg.experiment + ': ' + err)\n    return {\n        'payload': {\n            \"type\": \"ERROR\",\n            \"message\": err\n        },\n        'action': 'ERROR',\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    }\n}","outputs":1,"noerr":0,"x":320,"y":220,"wires":[["90e5d620.bb4b38"]]},{"id":"ab9af5a6.ce6868","type":"function","z":"e87fb0a3.9981f","name":"Parse message payload","func":"// Turning string payload into object\ntry {\n    msg.payload = JSON.parse(msg.payload)\n} catch(err) { // TODO this should error back to user\n    console.log(err)\n    return;\n}\n// Image data\nif (msg.payload.data_type !== undefined) {\n    if (msg.payload.data_type === 'image') {\n        msg.data_type = 'image';\n        msg.timestamp = msg.payload.timestamp;\n        return msg;\n    }\n}\n// Data delimiter\nif (msg.payload.data_delimiter !== undefined) {\n    msg.data_delimiter = msg.payload.data_delimiter;\n}\n\n// InfluxDB measurement\nif (msg.payload.influx_measurement !== undefined) {\n    msg.influx_measurement = msg.payload.influx_measurement;\n}\n\n// Data type\nif (msg.payload.data_type !== undefined) {\n    msg.data_type = msg.payload.data_type;\n} else {\n    msg.data_type = \"text/numeric\" // default\n}\n\n// Timestamp\nif (msg.payload.timestamp !== undefined) {\n    msg.timestamp = msg.payload.timestamp;\n}\n\n// Debugging index\nif (msg.payload.debug_index !== undefined) {\n    msg.debug_index = msg.payload.debug_index;\n}\n\n// Must be done last, overwrites msg.payload\nmsg.payload = msg.payload.data;\n\n// console.log(msg.debug_index)\nreturn msg;","outputs":1,"noerr":0,"x":870,"y":200,"wires":[["20729190.2a001e"]]},{"id":"672f89b9.2366e8","type":"function","z":"e87fb0a3.9981f","name":"Parsing data","func":"// Helper functions for melt \n// put here since the package was not loading in properly\n// https://github.com/jrideout/melt.js/blob/master/melt.js\nfunction set(keys) {\n    var s = {}, keys = keys || [];\n    for (var i = 0; i < keys.length; i++) {\n        s[keys[i]] = 1;\n    }\n    return s;\n}\n\nfunction extend(obj, copy) {\n    for (var k in copy) {\n        obj[k] = copy[k];\n    }\n    return obj;\n}\n\nfunction melt(data, keep, varName, valName, noAddId=true) {\n    var newData = [],\n        varName = varName || 'variable',\n        valName = valName || 'value',\n        keepSet = set(keep);\n    \n    data.forEach(function (row, rowId) {\n        var save = noAddId ? {} : {_id: rowId},\n            vars = [],\n            vals = [];\n        for (var k in row) {\n            if (keepSet[k]) {\n                save[k] = row[k];\n            } else {\n                vars.push(k);\n                vals.push(row[k]);\n            }\n        }\n        for (var i = 0; i < vars.length; i++) {\n            var newRow = {};\n            newRow[varName] = vars[i];\n            newRow[valName] = vals[i];\n            newData.push(extend(newRow, save));\n        }\n    });\n    return newData;\n}\n// ^^^ https://github.com/jrideout/melt.js/blob/master/melt.js  ^^^\n\n// Getting experiment configurations\nvar config = global.get(msg.experiment)\n\n// Get device config\nvar device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\n\n// Get data headers from device config\nvar data_headers = device.headers\n\n// Retreiving the actual data\nvar data = msg.payload;\n\n// Splitting data if needed\nif (msg.data_delimiter !== undefined) {\n    var data_split = data.split(msg.data_delimiter);\n} else {\n    var data_split = [data];\n}\n\n// Drop message if data length !== headers length\nif (data_split.length !== data_headers.length) {\n    console.error(\"Number of data points does not equal the number of headers for this sensor. Is your delimiter correct?\")\n    console.error(\"Data points: \" + data_split.length)\n    console.error(\"Data headers: \" + data_headers.length)\n    return;\n}\n\n// Creating object for the data\nvar data_named = {}\n\n// Iterate data to set type while inserting to object\ndata_split.forEach(function(val, i) {\n    if (val.match(/^-?[,.\\d]+(e[+-]\\d+)?$/) !== null) {\n        data_named[data_headers[i]] = parseFloat(val)\n    } else if (val == '') {\n        data_named[data_headers[i]] = 0\n    } else {\n        data_named[data_headers[i]] = val\n    }\n})\n\n// Melting the data\nvar melt_params\nif (device.melt_data !== undefined) {\n    melt_params = device.melt_data\n    var melted_data = melt([data_named], \n                            melt_params.keep, \n                            melt_params.var_name, \n                            melt_params.var_val)\n}\n\n// Prepping data for InfluxDB\nvar influx_data;\nvar user_tags;\nif (device.melt_data !== undefined) {\n    if (device.influx_tags !== undefined) {\n        influx_data = []\n        user_tags = device.influx_tags\n        melted_data.forEach(function(named_data) {\n            tmp_data = [{}, {}]\n            Object.keys(named_data).forEach(function(d) {\n                if (user_tags.indexOf(d) < 0) {\n                    tmp_data[0][d] = named_data[d]\n                } else {\n                    tmp_data[1][d] = named_data[d]\n                }\n            })\n            influx_data.push(tmp_data)\n        })\n    } else {\n        console.log(melted_data)\n        influx_data = melted_data.forEach(d => [d]) \n        console.log(\"MELT AND NO TAG\")\n        console.log(influx_data)\n    }\n} else {\n    if (device.influx_tags !== undefined) {\n        // Splitting data into fields and tags which are InfluxDB constructs\n        //      Only tags can be used in a 'WHERE' query statement\n        influx_data = [{}, {}]\n        // Get data from user on which fields are tags\n        user_tags = device.influx_tags\n        Object.keys(data_named).forEach(function(d) {\n            if (user_tags.indexOf(d) < 0) {\n                influx_data[0][d] = data_named[d]\n            } else {\n                influx_data[1][d] = data_named[d]\n            }\n        })\n        console.log(\"NO MELT AND TAG\")\n    } else {\n        influx_data = data_named\n        console.log(\"NO MELT AND NO TAG\")\n    }\n}\n\n\nvar msg_out = {\n    'payload': influx_data,\n    'topic': msg.experiment + \"_\" + msg.sensor, // keep generic\n    'device_output_rate': parseInt(device.device_output_rate),\n    'type': 'DATA',\n    'timestamp': msg.timestamp,\n    'node_red_arrival_time': msg.node_red_arrival_time,\n    'msg_size': msg.msg_size,\n    'experiment': msg.experiment,\n    '_msgid': msg._msgid\n};\n\n// Adding InfluxDB measurement value\nif (msg.influx_measurement !== undefined) {\n    msg_out.measurement = msg.experiment + '_' + msg.influx_measurement;\n}\n\n// Output\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + exp_num + \"/\" +\n    msg.sensor;\n    \n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n// Return 3 things: \n//      Data for InfluxDB storage\n//      Data for file writing\n//      Data headers for file writing\nif (send_headers) {\n    return [\n        msg_out,\n        {\n            'payload': data_split,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename,\n            'type': 'data'\n        },\n        {\n            'payload': data_headers,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename,\n            'type': 'headers'\n        }\n    ];\n} else {\n    return [\n        msg_out,\n        {\n            'payload': data_split,\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor,\n            'filename': filename,\n            'type': 'data'\n        }\n    ];\n}","outputs":3,"noerr":0,"x":1464.9998931884766,"y":153.33333015441895,"wires":[["d002709c.5bc06"],["1ae53a2c.12a4e6"],["1ae53a2c.12a4e6"]]},{"id":"77320d06.2c7704","type":"function","z":"e87fb0a3.9981f","name":"Setting global config","func":"try {\n    // String to object\n    msg.payload = JSON.parse(msg.payload);\n    \n    // Temp storing config (for readability)\n    config = msg.payload\n    \n    // If configuration present error out\n    if (global.get(msg.experiment) !== undefined) {\n        return {\n            'payload': {\n                \"type\": \"NOTE\",\n                \"message\": 'There is already a configuration present for your experiment.' +\n                    'You must first end the old experiment before starting a new one.'\n            },\n            'topic': 'MDML_DEBUG/' + msg.experiment\n        }\n    }\n    \n    var config_validation = function(config) {\n        // Validating the 'experiment' section of the configuration\n        if (Object.keys(config).indexOf('experiment') < 0) {\n            throw \"Config section 'experiment' not found.\";\n        } else {\n            // Checking experiment section of the config\n            if (msg.experiment !== config.experiment.experiment_id) {\n                throw \"Experiment ID in the configuration does not match experiment ID in the message topic.\"\n            }\n            var exp_keys = Object.keys(config.experiment)\n            var valid_exp_keys = \n                exp_keys.indexOf('experiment_id') >= 0 &&\n                // exp_keys.indexOf('experiment_run_id') >= 0 &&\n                exp_keys.indexOf('experiment_notes') >= 0 &&\n                exp_keys.indexOf('experiment_devices') >= 0\n            if (!valid_exp_keys) {\n                throw \"Missing required experiment configuration values.\";\n            }\n            if (config.experiment.experiment_run_id !== undefined && \n                config.experiment.experiment_run_id == \"\") {\n                throw \"Experiment run ID cannot be a null string.\"\n            }\n        }\n\n        // Validating the 'devices' section of the configuration\n        if (Object.keys(config).indexOf('devices') < 0) {\n            throw \"Config section 'devices' not found.\";\n        } else {\n            if (config.devices.length === 0) {\n                throw \"No devices listed in the configuration.\"\n            }\n            for (var d in config.devices) {\n                var device = config.devices[d]\n                var dev_keys = Object.keys(device)\n                var valid_dev_keys =\n                    dev_keys.indexOf('device_id') >= 0 &&\n                    dev_keys.indexOf('device_name') >= 0 &&\n                    dev_keys.indexOf('device_output') >= 0 &&\n                    dev_keys.indexOf('device_output_rate') >= 0 &&\n                    dev_keys.indexOf('device_data_type') >= 0 &&\n                    dev_keys.indexOf('device_notes') >= 0 &&\n                    dev_keys.indexOf('headers') >= 0 &&\n                    dev_keys.indexOf('data_types') >= 0 &&\n                    dev_keys.indexOf('data_units') >= 0\n                if (!valid_dev_keys) {\n                    throw \"Missing required device configuration values in position \" + (d+1) + \".\";\n                }\n                // Check devices match\n                if (config.experiment.experiment_devices.indexOf(device.device_id) < 0) {\n                    throw 'Device listed in \"experiment_devices\" does not exist in \"devices\".';\n                }\n                // Check length of arrays are equal\n                if (device.headers.length !== device.data_types.length || device.headers.length !== device.data_units.length) { \n                    throw 'Inconsistent data descriptions in headers, data_types, or data_units. Number of entries in each field should be equal.';\n                }\n            }\n        }\n        return \"\";\n    }\n    \n    // Valid config (this also happens client-side via the MDML python package)\n    config_validation(config)\n  \n    // If experiment number is present in the configuration this is either a replay of an old experiment or a continuation.\n    if (config.experiment.experiment_run_id === undefined) {\n        // Get experiment number, increment, and save\n        experiments = global.get('experiments')\n        experiments[msg.experiment] += 1\n        global.set('experiments', experiments)\n        // Update config\n        config['experiment']['experiment_run_id'] = experiments[msg.experiment]\n    }\n\n    // Currently, new configs will erase all past configs\n    console.log(\"setting config globally\")\n    global.set(msg.experiment, config)\n    global.set(msg.experiment+\"_tasks\", [])\n    \n    return {\n        'payload': {\n            \"type\": \"NOTE\",\n            \"message\": 'Configuration loaded successfully! Experiment run ID: ' + config.experiment.experiment_run_id\n        },\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    };\n} catch (err) {\n    console.log(err)\n    return {\n        'payload': {\n            \"type\": \"ERROR\",\n            \"message\": err\n        },\n        'topic': 'MDML_DEBUG/' + msg.experiment\n    }\n}","outputs":1,"noerr":0,"x":860,"y":140,"wires":[["420b503a.af3dc"]]},{"id":"20729190.2a001e","type":"switch","z":"e87fb0a3.9981f","name":"Data Type Router","property":"data_type","propertyType":"msg","rules":[{"t":"eq","v":"image","vt":"str"},{"t":"eq","v":"text/numeric","vt":"str"},{"t":"eq","v":"vector","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":1190,"y":160,"wires":[["d1e4ad50.4cbf1"],["672f89b9.2366e8"],["4414779f.86e788"]]},{"id":"4669400f.8379a","type":"http in","z":"cc05686e.38f588","name":"","url":"/active","method":"get","upload":false,"swaggerDoc":"","x":250,"y":260,"wires":[["4b085349.26aa1c"]]},{"id":"4b5b4992.2abbe8","type":"change","z":"cc05686e.38f588","name":"Set Headers","rules":[{"t":"set","p":"headers","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"headers.content-type","pt":"msg","to":"text/json","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":663.1427307128874,"y":258.5714111328119,"wires":[["a46bb455.cf8738"]]},{"id":"a46bb455.cf8738","type":"http response","z":"cc05686e.38f588","name":"","statusCode":"","headers":{},"x":841.1428527831999,"y":259.57144165039,"wires":[]},{"id":"4b085349.26aa1c","type":"function","z":"cc05686e.38f588","name":"Input filename","func":"// Get global variables\nvar global_vars = global.keys()\n\n// Filtering - only experiment configs should remain\nglobal_vars = global_vars.filter(d => d in global.get(\"experiments\"))\n\n// Custom message if no experiments are running\nif (global_vars.length === 0) {\n    msg.payload = \"No active experiments.\"\n} else {\n    msg.payload = \"ACTIVE EXPERIMENTS\\n\\n\"\n    msg.payload += \"Experiment ID - Experiment Run\\n\"\n    // For each active experiment\n    global_vars.forEach(function(d) {\n        let config = global.get(d)\n        if (typeof(config) === \"object\") {\n            let exp_id = d\n            let exp_run_id = config.experiment.experiment_run_id\n            msg.payload += exp_id + \" - \" + exp_run_id + \"\\n\";\n        }\n    });\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":460.28567504882733,"y":259.1428833007819,"wires":[["4b5b4992.2abbe8"]]},{"id":"a81d850a.600df8","type":"split","z":"e87fb0a3.9981f","name":"Reset each experimental device","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1211.4285430908203,"y":454.28570890426636,"wires":[["ae411ac0.ec1ac8"]]},{"id":"ae411ac0.ec1ac8","type":"function","z":"e87fb0a3.9981f","name":"Add reset params","func":"// Add device to topic string\nmsg.topic = msg.experiment + \"_\" + msg.payload\nmsg.reset = true\nmsg.payload = undefined\nmsg.type = \"RESET\"\nreturn msg;","outputs":1,"noerr":0,"x":1451.4285430908203,"y":454.28570890426636,"wires":[["d002709c.5bc06","1ae53a2c.12a4e6"]],"info":"Links going to the 'Low Data Rates' and 'High \nData Rates' nodes are used to flush the node \nbuffers. The link going to the 'trigger & block'\nnode resets the node that is responsible for\nwriting the data headers to the file."},{"id":"e01fb02f.bd6df","type":"exec","z":"ab3bf1e3.b303a","command":"tar","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Archiving files","x":600,"y":260,"wires":[["f9e7026f.a4d1d"],[],[]]},{"id":"91fb1d22.2dcfc","type":"delay","z":"ab3bf1e3.b303a","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":430,"y":260,"wires":[["e01fb02f.bd6df"]]},{"id":"9d3e23da.182de","type":"function","z":"ab3bf1e3.b303a","name":"Archiving files","func":"console.log(\"ARCHIVING FILES\")\nconsole.log(msg)\nvar exp = msg.config.experiment.experiment_id;\nvar exp_num = msg.config.experiment.experiment_run_id;\n\nvar tar_command = {\n    'payload': '-C ' + global.get('saved_data_dir') + \n    ' -zcvf ' + global.get('data_archive') + \n    exp + '_' + \n    exp_num + '.tar.gz ' +\n    exp + '/' + exp + '_' + exp_num\n}\n\nvar save_config_file = {\n    'filename': global.get('saved_data_dir') + exp + '/' + exp + '_' +\n        exp_num + '/config.json',\n    'payload': msg.config\n}\n\nreturn [save_config_file, tar_command];","outputs":2,"noerr":0,"x":220,"y":220,"wires":[["6c5bc0c1.d1953"],["91fb1d22.2dcfc"]]},{"id":"6c5bc0c1.d1953","type":"file","z":"ab3bf1e3.b303a","name":"Overwrite file","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":450,"y":180,"wires":[["f8dcc55a.23f268"]]},{"id":"d8112057.b7b8b","type":"subflow:ab3bf1e3.b303a","z":"e87fb0a3.9981f","name":"Archiving experiment files","env":[],"x":1210,"y":360,"wires":[]},{"id":"139f2b49.ceb9c5","type":"influxdb out","z":"b444b0d7.19cc9","influxdb":"18be395a.563767","name":"InfluxDB storage","measurement":"","precision":"","retentionPolicy":"","x":1650,"y":60,"wires":[]},{"id":"cfee3408.f0c768","type":"function","z":"b444b0d7.19cc9","name":"Using InfluxDB?","func":"if (msg.measurement !== undefined || msg.action === \"RESET\") {\n    return msg;\n}","outputs":1,"noerr":0,"x":304,"y":240,"wires":[["75549f8f.55825"]]},{"id":"6213b9.2663cc48","type":"function","z":"b444b0d7.19cc9","name":"Structuring for InfluxDB insert","func":"var payload = []\nmsg.payload.forEach(function(d){\n    payload.push([d]);\n});\nmsg.payload = payload;\nmsg.measurement = msg.topic\nreturn msg;","outputs":1,"noerr":0,"x":1410,"y":240,"wires":[["139f2b49.ceb9c5"]]},{"id":"725e792.4c29d88","type":"batcher","z":"b444b0d7.19cc9","name":"Low Data Rates","maxTopics":"300","maxMessagesPerTopic":"6000","maxDelay":"5000","x":1120,"y":220,"wires":[["6213b9.2663cc48"]]},{"id":"5972ecbd.10c374","type":"switch","z":"b444b0d7.19cc9","name":"Fast/Slow Producers","property":"device_output_rate","propertyType":"msg","rules":[{"t":"lt","v":"30","vt":"str"},{"t":"btwn","v":"30","vt":"num","v2":"100","v2t":"num"},{"t":"gt","v":"100","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":840,"y":180,"wires":[["8fb83625.ad69d8","139f2b49.ceb9c5"],["725e792.4c29d88"],["eb43416a.3d87b"]]},{"id":"eb43416a.3d87b","type":"batcher","z":"b444b0d7.19cc9","name":"High Data Rates","maxTopics":"300","maxMessagesPerTopic":"50000","maxDelay":"5000","x":1130,"y":280,"wires":[["6213b9.2663cc48"]]},{"id":"75549f8f.55825","type":"switch","z":"b444b0d7.19cc9","name":"DATA or RESET message","property":"type","propertyType":"msg","rules":[{"t":"eq","v":"DATA","vt":"str"},{"t":"eq","v":"RESET","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":540,"y":240,"wires":[["5972ecbd.10c374"],["725e792.4c29d88","eb43416a.3d87b"]]},{"id":"d002709c.5bc06","type":"subflow:b444b0d7.19cc9","z":"e87fb0a3.9981f","name":"","env":[],"x":1760,"y":200,"wires":[]},{"id":"d7d91ae5.4775b8","type":"file","z":"70fe595b.4aa5c8","name":"Add data","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1080,"y":240,"wires":[[]]},{"id":"5488e4a7.52911c","type":"batch","z":"70fe595b.4aa5c8","name":"","mode":"interval","count":10,"overlap":0,"interval":10,"allowEmptySequence":false,"topics":[],"x":750,"y":240,"wires":[["a42ac6e1.a4f398"]]},{"id":"c913f694.bb7ed8","type":"trigger","z":"70fe595b.4aa5c8","op1":"","op2":"0","op1type":"pay","op2type":"str","duration":"0","extend":false,"units":"ms","reset":"","bytopic":"topic","name":"","x":780,"y":190,"wires":[["1d9dd500.ef75bb"]]},{"id":"1d9dd500.ef75bb","type":"csv","z":"70fe595b.4aa5c8","name":"Obj to tsv","sep":"\\t","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","skip":"0","strings":true,"x":940,"y":190,"wires":[["5f5255ce.6ae35c"]]},{"id":"a42ac6e1.a4f398","type":"csv","z":"70fe595b.4aa5c8","name":"Obj to tsv","sep":"\\t","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","skip":"0","strings":true,"x":940,"y":240,"wires":[["d7d91ae5.4775b8"]]},{"id":"5f5255ce.6ae35c","type":"file","z":"70fe595b.4aa5c8","name":"Add data headers","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1110,"y":190,"wires":[[]]},{"id":"f5fb901d.1101a","type":"comment","z":"70fe595b.4aa5c8","name":"File storage","info":"","x":770,"y":160,"wires":[]},{"id":"fa8868a0.4967c8","type":"switch","z":"70fe595b.4aa5c8","name":"","property":"type","propertyType":"msg","rules":[{"t":"eq","v":"headers","vt":"str"},{"t":"eq","v":"RESET","vt":"str"},{"t":"eq","v":"data","vt":"str"},{"t":"eq","v":"vector_data","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":460,"y":220,"wires":[["c913f694.bb7ed8"],[],["5488e4a7.52911c"],["4a9d8c4c.6fc974"]]},{"id":"1ae53a2c.12a4e6","type":"subflow:70fe595b.4aa5c8","z":"e87fb0a3.9981f","name":"","env":[],"x":1796.2500305175781,"y":320.0000057220459,"wires":[]},{"id":"f3b79627.c1b198","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /FSP_PLIF","url":"/FSP_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1140,"y":40,"wires":[["226f7d97.58da92"]]},{"id":"226f7d97.58da92","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":40,"wires":[[]]},{"id":"c9776831.965f58","type":"function","z":"3665fcdd.57c5f4","name":"Format metadata","func":"// Loading fs package\nvar fs = global.get('fs');\n\n// Getting experiment configurations\nvar config = global.get(msg.experiment)\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\nmsg.exp_num = exp_num;\n// Image index key\nvar index_key = msg.experiment + '_' + msg.sensor + \"_index\";\n\n// Index number for filename\nvar index = global.get(index_key) || 1;\n\n// Create filepath - comments as an example\nvar filepath = global.get('saved_data_dir') + \n    msg.experiment + '/' +  // FSP\n    msg.experiment + '_' + exp_num + '/' +  // FSP_1\n    msg.sensor + '_images' // PLIF\nvar metadata_filepath = global.get('saved_data_dir') + \n    msg.experiment + '/' +  // FSP\n    msg.experiment + '_' + exp_num + '/' +  // FSP_1\n    msg.sensor // PLIF\n\n// Create dirs\nif (!fs.existsSync(filepath)) {\n    console.log(\"MKDIR STARTING\")\n    console.log(filepath)\n    fs.mkdir(filepath, { recursive: true }, (err) => {\n      if (err) throw err;\n    });\n    console.log(\"MKDIR ENDED\")\n}\n\n// Create filename\nvar filename = \"\"\nif (msg.payload.filename === undefined) {\n    filename = msg.sensor + '_' + index + '.JPG'\n} else {\n    filename = msg.payload.filename\n}\n\n// Increment index\nglobal.set(index_key, index + 1)\n\n// Load base64\nvar base64 = global.get('base64');\n// String to bytes for saving the image\nimage_data = Buffer.from(msg.payload.data, 'base64')\n\n// // Save the file\n// fs.writeFile(\n//     filepath + '/' + filename,\n//     image_data,\n//     function(err) { \n//         if (err) { \n//             return console.log(err) \n//         }\n//     }\n// );\nmsg.filename = metadata_filepath;\nmsg.file = msg.experiment + '_' + msg.exp_num + '/' + msg.sensor + '_images/' + filename;\nmsg.timestamp = msg.payload.timestamp;\nreturn [\n    msg,\n    {\n        \"payload\": image_data,\n        \"filename\": filepath + '/' + filename,\n        \"timestamp\": msg.timestamp,\n        \"msg_size\": msg.msg_size,\n        \"experiment\": msg.experiment\n    }\n];","outputs":2,"noerr":0,"x":430,"y":580,"wires":[["bb3a8f90.36f13"],["e3e2bec1.24cf4"]],"info":"Images are saved to files as they are received from the experiment. A flow-level variable is incremented each save to ensure unique file names."},{"id":"78148526.a1b5ec","type":"switch","z":"3665fcdd.57c5f4","name":"Experiment Stream Splitter","property":"index_key","propertyType":"msg","rules":[{"t":"eq","v":"FSP_PLIF","vt":"str"},{"t":"eq","v":"FSP_ANGLED_PLIF","vt":"str"},{"t":"eq","v":"FSP_ANALYZED_PLIF","vt":"str"},{"t":"eq","v":"TEST_PLIF","vt":"str"},{"t":"eq","v":"TEST_IMAGE","vt":"str"},{"t":"eq","v":"TEST_IMAGE_ANALYSIS","vt":"str"},{"t":"eq","v":"ESPIN_IMAGE","vt":"str"},{"t":"eq","v":"TEST_TIFF10","vt":"str"},{"t":"eq","v":"TEST_TIFF15","vt":"str"}],"checkall":"true","repair":false,"outputs":9,"x":800,"y":420,"wires":[["226f7d97.58da92"],["dcf67f70.0bccc"],["54bfb1bd.d9a94"],["3b1f307b.953f4"],["25d33612.55174a","e782f6ca.8fc8c8"],["a9e3e4f2.541118"],[],["e782f6ca.8fc8c8"],["e782f6ca.8fc8c8"]]},{"id":"1ff4562.37e26aa","type":"function","z":"3665fcdd.57c5f4","name":"Formating images for streaming","func":"// Setting index key to determine stream path\nmsg.index_key = msg.experiment + \"_\" + msg.sensor;\n// Load base64\nvar base64 = global.get('base64');\n// String to bytes for streaming the image\nmsg.payload = Buffer.from(msg.payload.data, 'base64')\nreturn msg;","outputs":1,"noerr":0,"x":456.25000762939453,"y":448.7500066757202,"wires":[["78148526.a1b5ec"]]},{"id":"d1e4ad50.4cbf1","type":"subflow:3665fcdd.57c5f4","z":"e87fb0a3.9981f","name":"","env":[],"x":1420,"y":80,"wires":[["d002709c.5bc06"]]},{"id":"8f1776be.8ad5e8","type":"comment","z":"3665fcdd.57c5f4","name":"Manual Changes Needed Here","info":"Add or remove statements in this switch for new\nexperiments. The format for the switch statement\nshould be \"[Experiment ID]_[Device ID]\".","x":790,"y":320,"wires":[]},{"id":"420b503a.af3dc","type":"mqtt out","z":"e87fb0a3.9981f","name":"Publish Events","topic":"","qos":"2","retain":"false","broker":"8f932cd7.3efac","x":1140,"y":560,"wires":[]},{"id":"f6cefe77.aeadd","type":"mqtt out","z":"ab3bf1e3.b303a","name":"Publish Events","topic":"","qos":"2","retain":"false","broker":"8f932cd7.3efac","x":1460,"y":240,"wires":[]},{"id":"912757c.a5f05a8","type":"function","z":"ab3bf1e3.b303a","name":"Put object MinIO and Format message to user","func":"// get minio API, its creds, and fs\nvar minio = global.get('minio');\nvar minio_creds = global.get('minio_creds');\nvar fs = global.get('fs');\nvar archive_dir = global.get('data_archive');\nvar host = global.get('host');\n\n// get experiment ID\nexp = msg.payload.split('/')[0];\n\nif (msg.rc.code === 0) {\n    var filename = msg.payload.split('/')[1] + '.tar.gz';\n    var file = archive_dir + filename;\n    console.log(\"Archving msg:\")\n    console.log(msg)\n    // Storing tar file in MinIO bucket\n    // Create Minio client\n    mc = new minio.Client({\n        endPoint: 'minio',\n        port: 9000,\n        useSSL: false,\n        accessKey: minio_creds.accesskey,\n        secretKey: minio_creds.secretkey,\n    });\n    metaData = {\n        'Content-Type': 'application/octet-stream'\n    }\n    console.log(exp)\n    console.log(filename)\n    console.log(file)\n    console.log(metaData)\n    mc.fPutObject('mdml-'+exp.toLowerCase(), filename, file, metaData, function(err, etag) {\n        if (err !== null) {\n            console.log(err)\n            return {\n                'topic': 'MDML_DEBUG/' + exp,\n                'payload': {\n                    \"type\": \"ERROR\",\n                    \"message\": err\n                }\n            }\n        }\n    })\n\n    return {\n        'topic': 'MDML_DEBUG/' + exp,\n        'payload': {\n            \"type\": \"NOTE\",\n            \"message\": 'Archived files for experiment with ID: ' + exp\n        }\n    };\n} else {\n    return {\n        'topic': 'MDML_DEBUG/' + exp,\n        'payload': {\n            \"type\": \"ERROR\",\n            \"message\": 'Error archiving files for experiment with ID: ' + exp\n        }\n    };\n}\n","outputs":1,"noerr":0,"x":1087.4999771118164,"y":240.24999713897705,"wires":[["f6cefe77.aeadd"]]},{"id":"5cc0fd46.db5244","type":"comment","z":"ab3bf1e3.b303a","name":"Write configuration file","info":"","x":480,"y":140,"wires":[]},{"id":"f8dcc55a.23f268","type":"function","z":"ab3bf1e3.b303a","name":"Format message to user","func":"var exp = msg.payload.experiment.experiment_id;\nreturn {\n    'topic': 'MDML_DEBUG/' + exp,\n    'payload': {\n        \"type\": \"NOTE\",\n        \"message\": exp + ' experiment configuration file saved for archiving.'\n    }\n};\n","outputs":1,"noerr":0,"x":800,"y":120,"wires":[["f6cefe77.aeadd"]]},{"id":"7b623aef.087d94","type":"mqtt in","z":"e87fb0a3.9981f","name":"ADMIN_MDML/#","topic":"ADMIN_MDML/#","qos":"2","datatype":"auto","broker":"a98579fa.409578","x":220,"y":920,"wires":[["9ef31031.0276c"]]},{"id":"5f86934e.2152cc","type":"function","z":"e87fb0a3.9981f","name":"Add new experiment ID","func":"var new_ID = msg.payload.toUpperCase()\n\nvar experiments = global.get('experiments')\nexperiments[new_ID] = 0\nglobal.set('experiments', experiments)\n\nreturn msg;","outputs":1,"noerr":0,"x":1090,"y":880,"wires":[[]]},{"id":"1250d35e.86345d","type":"switch","z":"e87fb0a3.9981f","name":"Action Router","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"EXPERIMENT","vt":"str"},{"t":"eq","v":"RESET_EXP_RUN_ID","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":800,"y":920,"wires":[["5f86934e.2152cc"],["42b78c0b.d4ff64"]]},{"id":"9ef31031.0276c","type":"function","z":"e87fb0a3.9981f","name":"Parse message topic","func":"// Deconstruct message\nconsole.log(msg)\nvar topic_parts = msg.topic.split('/');\nconsole.log(topic_parts)\n// Separate parts of the message topic\nmsg.action = topic_parts[1];\n\nreturn msg;","outputs":1,"noerr":0,"x":600,"y":920,"wires":[["1250d35e.86345d"]]},{"id":"90e5d620.bb4b38","type":"switch","z":"e87fb0a3.9981f","name":"Action Router","property":"action","propertyType":"msg","rules":[{"t":"eq","v":"ERROR","vt":"str"},{"t":"eq","v":"CONFIG","vt":"str"},{"t":"eq","v":"DATA","vt":"str"},{"t":"eq","v":"FUNCX","vt":"str"},{"t":"eq","v":"RESET","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":540,"y":220,"wires":[["420b503a.af3dc"],["77320d06.2c7704"],["ab9af5a6.ce6868"],["ffe81ed0.6f979"],["eaf0affa.b0966"]]},{"id":"bb3a8f90.36f13","type":"function","z":"3665fcdd.57c5f4","name":"Create metadata payload","func":"var influx_payload = [{\n    \"time\": msg.timestamp,\n    \"filepath\": msg.file\n}];\nif (msg.payload.metadata !== undefined) {\n    if (typeof(msg.payload.metadata) == \"object\") {\n        influx_payload.push(msg.payload.metadata)\n        console.log(influx_payload)\n    }\n}\nmsg.payload = msg.timestamp + '\\t' + msg.file;\nreturn [\n    msg,\n    {\n        'payload': influx_payload,\n        'topic': msg.experiment + \"_\" + msg.sensor, // keep generic\n        'device_output_rate': 1,\n        'type': 'DATA',\n        'data_type': 'image',\n        'measurement': msg.experiment + '_' + msg.sensor\n    }\n]","outputs":2,"noerr":0,"x":670,"y":580,"wires":[["8128f1b1.f555e","2a2f8cbb.9d4f44"],[]]},{"id":"2868df42.96087","type":"file","z":"3665fcdd.57c5f4","name":"Save timestamp and filename","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","encoding":"none","x":1210,"y":540,"wires":[[]]},{"id":"fcafc652.308348","type":"comment","z":"e87fb0a3.9981f","name":"Manual Changes Needed Here","info":"Add or remove statements in this switch for new\nexperiments. The format for the switch statement\nshould be \"[Experiment ID]_[Device ID]\".","x":1418.75,"y":45,"wires":[]},{"id":"8128f1b1.f555e","type":"function","z":"3665fcdd.57c5f4","name":"File header","func":"header_msg = {\n    'filename': msg.filename,\n    'payload': 'timestamp\\tfilepath'\n}\n\n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(msg.filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n\nif (send_headers) {\n    return header_msg;\n}","outputs":1,"noerr":0,"x":870,"y":520,"wires":[["2868df42.96087"]]},{"id":"2a2f8cbb.9d4f44","type":"batch","z":"3665fcdd.57c5f4","name":"","mode":"interval","count":10,"overlap":0,"interval":"5","allowEmptySequence":false,"topics":[],"x":940,"y":573.7500009536743,"wires":[["2868df42.96087"]]},{"id":"42b78c0b.d4ff64","type":"function","z":"e87fb0a3.9981f","name":"Resetting Experiment Run Numbers","func":"var exps = global.get('experiments');\nexps = {\n    'FSP':0,\n    'TEST':0,\n    'ESPIN':0\n};\nglobal.set('experiments', exps)\nreturn msg;","outputs":1,"noerr":0,"x":1090,"y":960,"wires":[[]]},{"id":"4414779f.86e788","type":"function","z":"e87fb0a3.9981f","name":"Parsing vector data","func":"// Getting experiment configurations\nvar config = global.get(msg.experiment)\nconsole.log(msg)\n// Get device config\nvar device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\n\n// Experiment number\nvar exp_num = config.experiment.experiment_run_id;\n\n// Get data headers from device config\nvar data_headers = device.headers;\nvar num_headers = data_headers.length;\n\n// Timestamp\nvar data_includes_timestamp = false;\nif (msg.timestamp === 'many') {\n    data_includes_time = true;\n}\nvar influx_create_timestamp = false;\nif (msg.timestamp === 'none') {\n    influx_create_timestamp = true;\n}\n\n// Are there tags for influxdb?\nif (device.influx_tags !== undefined) {\n    var user_tags = device.influx_tags;\n}\n// Get data length\nvar dat_length = msg.payload[data_headers[0]].length;\n\n// Creating InfluxDB data\nvar influx_data = []\nvar file_data = ''\nfor (i=0; i < dat_length; i++) {\n    let tags = {}\n    let fields = {}\n    data_headers.forEach(function(d, head_ind) {\n        let val = msg.payload[d][i];\n        file_data += val\n        if (head_ind !== (num_headers-1)) {\n            file_data += '\\t';\n        } else {\n            file_data += '\\n';\n        }\n        \n        if (String(val).match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n            val = parseFloat(val)\n        } else if (val === '') {\n            val = 0\n        }\n        // insert into onject\n        fields[d] = val;\n        if (user_tags.indexOf(d) >= 0) {\n            tags[d+'_tag'] = val;\n        }\n        // insert time if needed\n        if (influx_create_timestamp === false & data_includes_timestamp === false) {\n            fields['time'] = parseInt(msg.timestamp)\n        }\n    })\n    influx_data.push([fields, tags]);\n}\n\nvar influx_msg = {\n    'payload': influx_data,\n    'topic': msg.experiment + \"_\" + msg.sensor, // keep generic\n    'device_output_rate': parseInt(device.device_output_rate),\n    'type': 'DATA'\n};\n\n// Adding InfluxDB measurement value\nif (msg.influx_measurement !== undefined) {\n    influx_msg.measurement = msg.experiment + '_' + msg.influx_measurement;\n}\n\n// Output\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + exp_num + \"/\" +\n    msg.sensor;\n    \n\n// Check if file exists (if it does do not send headers)\nvar fs = global.get('fs');\nvar send_headers = true;\ntry {\n    if (fs.existsSync(filename)) {\n        //file exists\n        send_headers = false;\n    }\n} catch(err) {}\n\n// Return 3 things: \n//      Data for InfluxDB storage\n//      Data for file writing\n//      Data headers for file writing\nif (send_headers) {\n    console.log(\"SENDING HEADERS\")\n    return [\n        influx_msg,\n        {\n            'payload': data_headers,\n            'type': 'headers',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        },\n        {\n            'payload': file_data,\n            'type': 'vector_data',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        }\n    ];\n} else {\n    console.log(\"NOT SENDING HEADERS\")\n    console.log(filename)\n    \n    return [\n        influx_msg,\n        {\n            'payload': file_data,\n            'type': 'vector_data',\n            'topic': msg.experiment + \"_\" + exp_num + \"_\" + msg.sensor, \n            'filename': filename\n        }\n    ];\n}","outputs":3,"noerr":0,"x":1467.5000610351562,"y":216.66667556762695,"wires":[["d002709c.5bc06"],["1ae53a2c.12a4e6"],["1ae53a2c.12a4e6"]]},{"id":"f85ce618.c40888","type":"file","z":"70fe595b.4aa5c8","name":"Add data","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"false","encoding":"none","x":1080.000015258789,"y":291.2500042915344,"wires":[[]]},{"id":"4a9d8c4c.6fc974","type":"batch","z":"70fe595b.4aa5c8","name":"","mode":"interval","count":10,"overlap":0,"interval":10,"allowEmptySequence":false,"topics":[],"x":751.2500076293945,"y":292.50000381469727,"wires":[["f85ce618.c40888"]]},{"id":"3343d8c1.fb7628","type":"function","z":"831f119b.483c2","name":"Create InfluxDB query","func":"var config = global.get(msg.experiment)\n// Get device config\nvar analysis_device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\n// Parsing message\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    msg.query_payload = msg.payload.queries\n    msg.globus_token = msg.payload.globus_token\n    msg.endpoint_uuid = msg.payload.endpoint_id\n    msg.function_uuid = msg.payload.function_id\n    if (msg.payload.parameters !== undefined) {\n        msg.parameters = msg.payload.parameters\n    }\n    // msg.delay = analysis_device.estimated_runtime_ms\n} catch (err) {\n    console.log(\"Error JSON parsing funcx message payload\")\n    console.log(msg.payload)\n    return\n}\nmsg.payload = []\nmsg.image_devices = []\nmsg.query_payload.forEach(function(d) {\n    device_config = config.devices.filter(f => f.device_id === d.device)[0]\n    if (device_config.device_data_type === \"image\") {\n        msg.image_devices.push(device_config.device_id)\n    }\n    // Starting query string creation\n    query = \"SELECT \"\n    var_len = d.variables.length\n    // Add variables to query string\n    if (var_len === 0) {\n        d.variables = device_config.headers\n        query += \"* \"\n    } else {\n        for (var i in d.variables) {\n            query += d.variables[i]\n            if (i < var_len - 1) {\n                query += \", \"\n            } else {\n                query += \" \"\n            }\n        }\n    }\n    // Adding measurement\n    query += \"FROM \" + msg.experiment + \"_\" + d.device + \" \"\n    // Adding GROUP BY for vector data\n    if (device_config.device_data_type === \"vector\") {\n        // Adding GROUP BY with tags\n        if (device_config.influx_tags !== undefined) {\n            d.variables.forEach(function(v) {\n                if (device_config.influx_tags.indexOf(v) >= 0) {\n                    query += \"GROUP BY \" + v + \"_tag\" + \" \"\n                }\n            })\n        }\n    }\n    // Adding WHERE statement\n    if (d.where !== undefined && Object.keys(d.where).length > 0) {\n        for (var measurement in d.where) {\n            // Adding WHERE or AND \n            if (query.search(\"WHERE\") > -1) {\n                query += \"AND \"\n            } else {\n                query += \"WHERE \"\n            }\n            // Adding conditional statement\n            if (d.where[measurement].match(/^-?[,.\\d]+(e[+-]\\d)?$/) !== null) {\n                query += measurement + \" = \" + d.where[measurement] + \" \"\n            } else {\n                query += measurement + \" = '\" + d.where[measurement] + \"' \"\n            }\n        }\n    }\n    // Adding WHERE statement for timestamps\n    if (d.time_start !== undefined) {\n        // Adding WHERE or AND\n        if (query.search(\"WHERE\") > -1) {\n            query += \"AND \"\n        } else {\n            query += \"WHERE \"\n        }\n        // Adding conditional\n        query += \"time >= \" + d.time_start + \"ns \" \n    }\n    if (d.time_end !== undefined) {\n        // Adding WHERE or AND\n        if (query.search(\"WHERE\") > -1) {\n            query += \"AND \"\n        } else {\n            query += \"WHERE \"\n        }\n        // Adding conditional\n        query += \"time <= \" + d.time_end + \"ns \" \n    }\n    // Adding order statement and the limit\n    query += \"ORDER BY time DESC LIMIT \" + d.last + \";\"\n    msg.payload.push(query)\n});\n\nreturn msg;","outputs":1,"noerr":0,"x":220,"y":140,"wires":[["bee34d7d.0d328"]]},{"id":"ffe81ed0.6f979","type":"subflow:831f119b.483c2","z":"e87fb0a3.9981f","name":"","env":[],"x":890,"y":260,"wires":[["20729190.2a001e"]]},{"id":"bee34d7d.0d328","type":"split","z":"831f119b.483c2","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":410,"y":140,"wires":[["73067c4a.ab26e4"]]},{"id":"73067c4a.ab26e4","type":"function","z":"831f119b.483c2","name":".payload to .query","func":"msg.query = msg.payload;\nreturn msg;","outputs":1,"noerr":0,"x":590,"y":140,"wires":[["f36794ce.b601c8"]]},{"id":"f36794ce.b601c8","type":"influxdb in","z":"831f119b.483c2","influxdb":"18be395a.563767","name":"","query":"","rawOutput":false,"precision":"","retentionPolicy":"","x":800,"y":140,"wires":[["c9d25f41.baa9f"]]},{"id":"c9d25f41.baa9f","type":"join","z":"831f119b.483c2","name":"","mode":"auto","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":970,"y":140,"wires":[["d6a41b83.a13428"]]},{"id":"6ceaee66.481d3","type":"function","z":"831f119b.483c2","name":"Saving analysis call to file","func":"var config = global.get(msg.experiment);\nvar exp_run_id = config.experiment.experiment_run_id;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n} catch (err) {\n    console.log(\"Error JSON parsing funcx message payload\")\n    console.log(msg.payload)\n    return\n}\n\n// Get file save location\nSAVE_LOCATION = global.get(\"saved_data_dir\")\nfilename = SAVE_LOCATION + \n    msg.experiment + \"/\" + \n    msg.experiment + \"_\" + \n    exp_run_id + \"/\" +\n    \"FUNCX_CALLS\";\n\n// \n\nvar new_msg = {\n    \"filename\": filename,\n    \"topic\": msg.experiment + \"_\" + exp_run_id,\n    \"payload\": msg.payload.timestamp + \"\\t\" + \n        msg.payload.function_id + \"\\t\" +\n        msg.payload.endpoint_id + \"\\t\" +\n        JSON.stringify(msg.payload.queries)\n};\nreturn new_msg;","outputs":1,"noerr":0,"x":230,"y":60,"wires":[["9136f6b0.973198"]]},{"id":"9136f6b0.973198","type":"file","z":"831f119b.483c2","name":"Add data","filename":"","appendNewline":true,"createDir":true,"overwriteFile":"false","encoding":"none","x":440,"y":60,"wires":[[]]},{"id":"b3df3beb.e53908","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /TEST_PLIF","url":"/TEST_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1140,"y":160,"wires":[["3b1f307b.953f4"]]},{"id":"3b1f307b.953f4","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1299.0000305175781,"y":159.8571319580078,"wires":[[]]},{"id":"740e0d44.0b6904","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /TEST_IMAGE","url":"/TEST_IMAGE","method":"get","upload":false,"swaggerDoc":"","x":1130,"y":200,"wires":[["25d33612.55174a"]]},{"id":"25d33612.55174a","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":200,"wires":[[]]},{"id":"f9e7026f.a4d1d","type":"delay","z":"ab3bf1e3.b303a","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":800,"y":240,"wires":[["912757c.a5f05a8"]]},{"id":"f0ee1fcc.9fb1e","type":"python3-function","z":"831f119b.483c2","name":"Submit to FuncX","func":"import time\nimport requests\nfrom funcx.serialize import FuncXSerializer\nfrom fair_research_login import NativeClient\nCLIENT_ID='e6184e1c-43c0-4ac5-93b5-ddbd2ec2e5b6'\nENDPOINT_ID=msg['endpoint_uuid']\nFUNCTION_ID=msg['function_uuid']\n\ndef login(force=False):\n    \"\"\"Login with Globus. This should remember tokens after the first time.\"\"\"\n\n    scopes = [\"https://auth.globus.org/scopes/facd7ccc-c5f4-42aa-916b-a0e270e2c2a9/all\"]\n    cli = NativeClient(client_id=CLIENT_ID)\n    tokens = cli.login(refresh_tokens=True, no_local_server=True,\n                            no_browser=True, requested_scopes=scopes, force=force)\n    return tokens\n\n\ndef serialize_fx_inputs(*args, **kwargs):\n    fx_serializer = FuncXSerializer()\n    ser_args = fx_serializer.serialize(args)\n    ser_kwargs = fx_serializer.serialize(kwargs)\n    payload = fx_serializer.pack_buffers([ser_args, ser_kwargs])\n    return payload\n\n\ndef use_funcx(token, input_data, ep_id, func_id):\n    \"\"\"Submit a funcx invocation request. This will return the \n    task id to get the results with.\"\"\"\n    # Because we are not using the SDK we have to manually serialize the inputs\n    inputs = serialize_fx_inputs(input_data)\n\n    # Create the payload    \n    payload = {'func': func_id,\n               'payload': inputs,\n               'endpoint': ep_id}\n\n    # Set the auth header\n    headers = {'Authorization': f'Bearer {token}'}\n    url = 'https://funcx.org/api/v1/submit'\n    res = requests.post(url, json=payload, headers=headers)\n    try:\n        print(res)\n        print(res.content)\n        print(res.json())\n        return res.json()['task_uuid']\n    except:\n        print('ERROR in use_funcx()')\n\n# Run the function\nprint(msg['payload'])\ntask_id = use_funcx(msg['globus_token'], msg['payload'], ENDPOINT_ID, FUNCTION_ID)\nmsg['task_id'] = task_id\nmsg['num_result_attempts'] = 0\nreturn msg","outputs":1,"x":250,"y":440,"wires":[["77a8dffa.bb1da"]]},{"id":"197bd27b.6a929e","type":"delay","z":"831f119b.483c2","name":"Delay on user-input","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1050,"y":380,"wires":[["157e4864.4ff8a8"]]},{"id":"fbb89d74.29271","type":"function","z":"831f119b.483c2","name":"Formatting message for database","func":"var config = global.get(msg.experiment)\n\n// Get device config\nvar device = config.devices.filter(function(d) {\n    return d.device_id === msg.sensor;\n})[0];\nmsg.influx_measurement = msg.sensor\nmsg.data_type = device.device_data_type;\nmsg.data_delimiter = \"\\t\";\nmsg.query_result = msg.payload;\nmsg.payload = msg.result;\n// console.log(\"RETURNED FUNCX CALL\");\n// // console.log(msg);\n// console.log(\"RETURNED FUNCX CALL\");\n\n// Remove from experiment tasks\ntasks_at_large = global.get(msg.experiment+'_tasks')\ntask_index = tasks_at_large.indexOf(msg.task_id);\nif (task_index !== -1) tasks_at_large.splice(task_index, 1);\nglobal.set(msg.experiment+'_tasks', tasks_at_large)\nreturn msg;","outputs":1,"noerr":0,"x":1040,"y":600,"wires":[[]]},{"id":"157e4864.4ff8a8","type":"python3-function","z":"831f119b.483c2","name":"Get results","func":"import requests\nfrom funcx.serialize import FuncXSerializer\n\ndef get_task(token, task_id):\n    \"\"\"Get the result of the function.\"\"\"\n    # Set the auth header\n    headers = {'Authorization': f'Bearer {token}'}\n    url = f'https://funcx.org/api/v1/tasks/{task_id}'\n    res = requests.get(url, headers=headers)\n    return res.json()\n    \n# Increment the number of tries to retrieve the result\nmsg['num_result_attempts'] += 1\n\n# Stop attempting at a 1 million tries\nif msg['num_result_attempts'] > 3000:\n    msg['res_returned'] = None\n    return msg\n\n# Get the result\noutput = get_task(msg['globus_token'], msg['task_id'])\n# print(output)\n\n# deserialize the output\nfx_serializer = FuncXSerializer()\nprint(output)\nif output.get('result') is None:\n    print('FuncX has not returned yet')\n    if output.get('exception') is None:\n        msg['res_returned'] = False\n    else:\n        print('An error occurred in the FuncX function: ')\n        xception = fx_serializer.deserialize(output['exception'])\n        print(\"PRINT TYPE OF XCEPTION\")\n        print(type(xception))\n        print(\"PRINT XCEPTION ETYPE\")\n        print(xception.e_type)\n        print(\"PRINT XCEPTION VALUE\")\n        print(xception.e_value)\n        print(\"PRINT XCEPTION TRACEBACK\")\n        print(xception.e_traceback)\n        msg['res_returned'] = \"Exception\"\n        msg['exception_value'] = xception.e_value\nelse:\n    result = fx_serializer.deserialize(output['result'])\n    print(\"got result\")\n    print(msg)\n    msg['res_returned'] = True\n    msg['result'] = result\n\nreturn msg","outputs":1,"x":730,"y":440,"wires":[["701c1ebc.89ab3"]]},{"id":"701c1ebc.89ab3","type":"switch","z":"831f119b.483c2","name":"","property":"res_returned","propertyType":"msg","rules":[{"t":"false"},{"t":"eq","v":"Exception","vt":"str"},{"t":"true"}],"checkall":"true","repair":false,"outputs":3,"x":870,"y":440,"wires":[["197bd27b.6a929e"],["df018add.44c3e8"],["fbb89d74.29271","dc904942.ca2ad8"]]},{"id":"c3c80a35.c83118","type":"mqtt out","z":"831f119b.483c2","name":"Publish Events","topic":"","qos":"2","retain":"false","broker":"8f932cd7.3efac","x":1300,"y":540,"wires":[]},{"id":"dc904942.ca2ad8","type":"function","z":"831f119b.483c2","name":"Success notification","func":"return [\n    {\n        \"topic\": \"MDML_DEBUG/\" + msg.experiment,\n        \"payload\": {\n            \"type\": \"NOTE\",\n            \"message\": \"FuncX analysis successfully returned.\"\n        }\n    },\n    {\n        \"topic\": \"MDML/\" + msg.experiment + \"/RESULTS/\" + msg.sensor,\n        \"payload\": msg.result\n    }\n];","outputs":2,"noerr":0,"x":1080,"y":560,"wires":[["c3c80a35.c83118"],["c3c80a35.c83118"]]},{"id":"d6a41b83.a13428","type":"function","z":"831f119b.483c2","name":"Structuring payload","func":"original_query = msg.query_payload\nrestruct_payload = {}\nfor (var i = 0; i < original_query.length; i++) {\n    restruct_payload[original_query[i].device] = msg.payload[i].splice(0, original_query[i].last)\n}\nif (msg.parameters !== undefined) {\n    params = msg.parameters\n} else {\n    params = {}\n}\nmsg.payload = [\n    restruct_payload,\n    params\n]\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":340,"wires":[["f0ee1fcc.9fb1e"]]},{"id":"86b2ff0.40bea","type":"function","z":"cc05686e.38f588","name":"Forming filepath","func":"console.log(msg)\n\nmsg.filename = '/data/saved_data/' + msg.req.query.experiment_id + '/' + msg.req.query.path\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":560,"wires":[["d2eb1b52.071ab8"]]},{"id":"32d347f.83e88b8","type":"http in","z":"cc05686e.38f588","name":"","url":"/image","method":"get","upload":false,"swaggerDoc":"","x":250,"y":560,"wires":[["86b2ff0.40bea"]]},{"id":"d2eb1b52.071ab8","type":"file in","z":"cc05686e.38f588","name":"","filename":"","format":"","x":610,"y":560,"wires":[["845d52ab.b1cd5"]]},{"id":"845d52ab.b1cd5","type":"change","z":"cc05686e.38f588","name":"Set Headers","rules":[{"t":"set","p":"headers","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"headers.content-type","pt":"msg","to":"image/webp","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":770,"y":560,"wires":[["fa45bf59.ed75f"]]},{"id":"fa45bf59.ed75f","type":"http response","z":"cc05686e.38f588","name":"","statusCode":"","headers":{},"x":930,"y":560,"wires":[]},{"id":"b8d1d2a9.15a83","type":"function","z":"831f119b.483c2","name":"Grabbing Images JS","func":"// Loading fs package\nvar fs = global.get('fs');\n\nconsole.log(\"GRABBING IMAGE BUFFERS\")\nfileroot = \"/data/saved_data/\" + msg.experiment + '/'\nconsole.log(msg)\nconsole.log(msg.payload)\nconsole.log(msg.payload.IMAGE)\nconsole.log(msg.image_devices)\nif (msg.image_devices.length === 0) {\n    return msg;\n} else {\n    for (i in msg.image_devices) {\n        dev = msg.image_devices[i]\n        msg.payload[dev] = msg.payload[dev].map(function(d) {\n            console.log(fileroot + d.filepath)\n            img_dat = fs.readFileSync(fileroot + d.filepath, function(err, data) {\n                if (err) throw err;\n                return data;\n            })\n            d.img = img_dat;\n            console.log(d)\n            return d;\n        })\n    }\n}\n\nconsole.log(msg.payload)\nconsole.log(msg.payload.IMAGE[0].img)\nconsole.log(\"GRABBING IMAGE BUFFERS\")\n\n\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":280,"wires":[[]]},{"id":"80ca6b43.ade198","type":"comment","z":"cc05686e.38f588","name":"Gets currently active experiments","info":"","x":310,"y":220,"wires":[]},{"id":"b7df0631.a697b8","type":"comment","z":"cc05686e.38f588","name":"Retrieves an image file ","info":"HTTP query must contain 'path' and 'experiment_id' ","x":280,"y":520,"wires":[]},{"id":"e3e2bec1.24cf4","type":"file","z":"3665fcdd.57c5f4","name":"Save image file","filename":"","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":660,"y":720,"wires":[["c4998d24.a9c26"]]},{"id":"4c255910.661518","type":"python3-function","z":"831f119b.483c2","name":"Grabbing images Python","func":"import numpy as np\n\nfileroot = f\"/data/saved_data/{msg['experiment']}/\"\nprint(msg)\nprint(msg['payload'])\nprint(msg['payload']['IMAGE'])\nprint(msg['image_devices'])\n\nif len(msg['image_devices']) == 0:\n    return msg\nelse:\n    for dev in msg['image_devices']:\n        for img in msg['payload'][dev]:\n            print(f'{fileroot}{img[\"filepath\"]}')\n            with open(fileroot + img['filepath'], 'rb') as f:\n                img_tmp = f.read()\n            img_tmp = np.fromstring(img_tmp, dtype=np.uint8)\n            img['img'] = img_tmp.tolist()\nprint(\"GRABBING IMAGES PYTHON\")\nreturn msg\n\n\n# // Loading fs package\n# var fs = global.get('fs');\n\n# console.log(\"GRABBING IMAGE BUFFERS\")\n# fileroot = \"/data/saved_data/\" + msg.experiment + '/'\n# console.log(msg)\n# console.log(msg.payload)\n# console.log(msg.payload.IMAGE)\n# console.log(msg.image_devices)\n# if (msg.image_devices.length === 0) {\n#     return msg;\n# } else {\n#     for (i in msg.image_devices) {\n#         dev = msg.image_devices[i]\n#         msg.payload[dev] = msg.payload[dev].map(function(d) {\n#             console.log(fileroot + d.filepath)\n#             img_dat = fs.readFileSync(fileroot + d.filepath, function(err, data) {\n#                 if (err) throw err;\n#                 return data;\n#             })\n#             d.img = img_dat;\n#             console.log(d)\n#             return d;\n#         })\n#     }\n# }\n\n# console.log(msg.payload)\n# console.log(msg.payload.IMAGE[0].img)\n# console.log(\"GRABBING IMAGE BUFFERS\")\n\n\n# return msg;","outputs":1,"x":750,"y":280,"wires":[[]]},{"id":"188045b3.f8353a","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /TEST_IMAGE_ANALYSIS","url":"/TEST_IMAGE_ANALYSIS","method":"get","upload":false,"swaggerDoc":"","x":1090,"y":240,"wires":[["a9e3e4f2.541118"]]},{"id":"a9e3e4f2.541118","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":240,"wires":[[]]},{"id":"44c1cf4c.933e9","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /FSP_ANALYZED_PLIF","url":"/FSP_ANALYZED_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1100,"y":120,"wires":[["54bfb1bd.d9a94"]]},{"id":"54bfb1bd.d9a94","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":120,"wires":[[]]},{"id":"9be7d517.99d1d8","type":"mqtt in","z":"72790cbd.ec4d64","name":"","topic":"$SYS/#","qos":"2","datatype":"auto","broker":"a98579fa.409578","x":150,"y":360,"wires":[["a25311c7.6dfa8"]]},{"id":"a25311c7.6dfa8","type":"function","z":"72790cbd.ec4d64","name":"Format data","func":"return {\n    'payload': [\n        {\n            'value': msg.payload\n        },\n        {\n            'topic': msg.topic\n        }\n    ]\n};","outputs":1,"noerr":0,"x":370,"y":360,"wires":[["55ea1b15.6a7e94"]]},{"id":"67bdc8bc.aa6368","type":"influxdb out","z":"72790cbd.ec4d64","influxdb":"85d62ac2.197038","name":"Store Mosquitto stats","measurement":"BROKER_STATS","precision":"","retentionPolicy":"","x":960,"y":360,"wires":[]},{"id":"ee6ae326.991e8","type":"comment","z":"72790cbd.ec4d64","name":"Capturing Broker Statistics","info":"","x":210,"y":320,"wires":[]},{"id":"d52f4e89.6cfcb","type":"function","z":"d5e2a103.5371c","name":"Resetting files and indices","func":"// Get experiment config\nvar config = global.get(msg.experiment);\n\n// Getting all device names\nvar devices = config.experiment.experiment_devices\n\n// Message to split and forward to resets\nvar reset_msg = {\n    'experiment': msg.experiment,\n    'topic': 'MDML/' + msg.experiment + '/RESET',\n    'payload': devices,\n    'config': config,\n    'action': 'RESET'\n}\n\n// Removing configuration\nglobal.set(msg.experiment, undefined)\nglobal.set(msg.experiment+\"_tasks\", undefined)\n\n// Remove flow indices\nfor (var dev in devices) {\n    global.set(msg.experiment + '_' + devices[dev] + \"_index\", undefined);\n}\n\n// Building notification for publishing\nvar reset_debug_msg = {\n    'payload': {\n        \"type\": \"NOTE\",\n        \"message\": \"Experiment reset initiated.\"\n    },\n    'topic': 'MDML_DEBUG/' + msg.experiment\n}\nconsole.log(\"RESET for \" + msg.experiment + \" started.\")\nreturn [\n    reset_msg,\n    reset_debug_msg\n];","outputs":2,"noerr":0,"x":830,"y":220,"wires":[[],[]]},{"id":"77a8dffa.bb1da","type":"function","z":"831f119b.483c2","name":"Add to list of running tasks","func":"tasks_at_large = global.get(msg.experiment + \"_tasks\")\ntasks_at_large.push(msg.task_id)\nglobal.set(msg.experiment + \"_tasks\", tasks_at_large)\nreturn msg;","outputs":1,"noerr":0,"x":500,"y":440,"wires":[["157e4864.4ff8a8"]]},{"id":"eaf0affa.b0966","type":"subflow:d5e2a103.5371c","z":"e87fb0a3.9981f","name":"","env":[],"x":880,"y":320,"wires":[["d8112057.b7b8b","a81d850a.600df8"],["420b503a.af3dc"]]},{"id":"622f93fe.4c1f6c","type":"delay","z":"d5e2a103.5371c","name":"Delay on user-input","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":410,"y":80,"wires":[["c1246093.5a8cc"]]},{"id":"c1246093.5a8cc","type":"function","z":"d5e2a103.5371c","name":"Check if there are tasks running still","func":"tasks_at_large = global.get(msg.experiment+\"_tasks\")\nif (tasks_at_large.length === 0) {\n    msg.continue_reset = 1\n} else {\n    if (msg.payload.hard_reset === 1) {\n        msg.continue_reset = 1    \n    } else {\n        msg.continue_reset = 0\n    }\n}\nreturn msg;","outputs":1,"noerr":0,"x":320,"y":200,"wires":[["49a38a18.2cb544"]]},{"id":"49a38a18.2cb544","type":"switch","z":"d5e2a103.5371c","name":"","property":"continue_reset","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"eq","v":"1","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":550,"y":200,"wires":[["622f93fe.4c1f6c"],["d52f4e89.6cfcb"]]},{"id":"25f453e5.3c847c","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /FSP_ANGLED_PLIF","url":"/FSP_ANGLED_PLIF","method":"get","upload":false,"swaggerDoc":"","x":1110,"y":80,"wires":[["dcf67f70.0bccc"]]},{"id":"dcf67f70.0bccc","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":80,"wires":[[]]},{"id":"55ea1b15.6a7e94","type":"join","z":"72790cbd.ec4d64","name":"Combine stats to one message","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"1","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":650,"y":360,"wires":[["67bdc8bc.aa6368"]]},{"id":"df018add.44c3e8","type":"function","z":"831f119b.483c2","name":"Handle Exception","func":"console.log(\"Exception of FUNCX function\")\nconsole.log(msg)\n\n// Remove from experiment tasks\ntasks_at_large = global.get(msg.experiment+'_tasks')\ntask_index = tasks_at_large.indexOf(msg.task_id);\nif (task_index !== -1) tasks_at_large.splice(task_index, 1);\nglobal.set(msg.experiment+'_tasks', tasks_at_large)\n\nconsole.log(\"REMOVED ERRORED TASK\")\n\nreturn {\n    \"topic\": \"MDML_DEBUG/\"+msg.experiment,\n    \"payload\": {\n        \"type\": \"ERROR\",\n        \"message\": \"Error while running FuncX analysis: \" + msg.exception_value\n    }\n}","outputs":1,"noerr":0,"x":1090,"y":520,"wires":[["c3c80a35.c83118"]]},{"id":"c4998d24.a9c26","type":"function","z":"3665fcdd.57c5f4","name":"Time of file save","func":"var ts_orig = msg.timestamp\nvar curr_time = Date.now()\nret_msg = {\n    'payload': [\n        {\n            \"data_saved_time\": curr_time,\n            \"time\": ts_orig\n        },\n        {\n            \"ID\": msg._msgid,\n            \"msg_size_tag\": msg.msg_size,\n            \"message_type_tag\": \"image\",\n            \"run_tag\": global.get(msg.experiment).experiment.experiment_run_id\n        }\n    ],\n    'measurement': 'IMAGE_TIMINGS'\n}\nreturn ret_msg;","outputs":1,"noerr":0,"x":600,"y":960,"wires":[["c8b58a6a.e2bab8"]]},{"id":"c8b58a6a.e2bab8","type":"influxdb out","z":"3665fcdd.57c5f4","influxdb":"85d62ac2.197038","name":"Record file saved time","measurement":"","precision":"","retentionPolicy":"","x":1120,"y":960,"wires":[]},{"id":"e782f6ca.8fc8c8","type":"function","z":"3665fcdd.57c5f4","name":"Time of file streaming","func":"var ts = msg.timestamp/1000000.0\nvar data_stream_time = Date.now()\nvar arrival_until_stream = data_stream_time - ts\nret_msg = {\n    'payload': [\n        {\n            \"data_stream_time\": Date.now(),\n            \"arrival_until_stream\": arrival_until_stream,\n            \"time\": msg.timestamp\n        },\n        {\n            \"ID\": msg._msgid,\n            \"msg_size_tag\": msg.msg_size,\n            \"message_type_tag\": \"image\",\n            \"run_tag\": global.get(msg.experiment).experiment.experiment_run_id\n        }\n    ],\n    'measurement': 'IMAGE_TIMINGS'\n}\nreturn ret_msg;","outputs":1,"noerr":0,"x":620,"y":920,"wires":[["aeef5804.896b88"]]},{"id":"aeef5804.896b88","type":"influxdb out","z":"3665fcdd.57c5f4","influxdb":"85d62ac2.197038","name":"Record file stream time","measurement":"","precision":"","retentionPolicy":"","x":1130,"y":920,"wires":[]},{"id":"847d6851.bb0ae8","type":"function","z":"3665fcdd.57c5f4","name":"Time sent/arrival ","func":"var ts = msg.timestamp/1000000.0\nvar diff = msg.node_red_arrival_time - ts\nret_msg = {\n    'payload': [\n        {\n            \"data_sent_time\": ts,\n            \"data_arrival_time\": msg.node_red_arrival_time,\n            \"time_until_arrival\": diff,\n            \"msg_size\": msg.msg_size,\n            \"time\": msg.timestamp,\n            \"message_type\": msg.data_type,\n            \"experiment\": msg.experiment,\n            \"device\": msg.experiment+\"_\"+msg.sensor\n        },\n        {\n            \"ID\": msg._msgid,\n            \"msg_size_tag\": msg.msg_size,\n            \"message_type_tag\": \"image\",\n            \"run_tag\": global.get(msg.experiment).experiment.experiment_run_id\n        }\n    ],\n    'measurement': 'IMAGE_TIMINGS'\n}\nreturn ret_msg;","outputs":1,"noerr":0,"x":600,"y":1000,"wires":[["3c4c30f9.f1a8c"]]},{"id":"3c4c30f9.f1a8c","type":"influxdb out","z":"3665fcdd.57c5f4","influxdb":"85d62ac2.197038","name":"Record sent/arrival time","measurement":"","precision":"","retentionPolicy":"","x":1130,"y":1000,"wires":[]},{"id":"8fb83625.ad69d8","type":"function","z":"b444b0d7.19cc9","name":"Sytem Timings","func":"var ts_sent = msg.timestamp/1000000.0\nvar diff = msg.node_red_arrival_time - ts_sent\nvar data_stream_time = Date.now()\nvar diff_to_stream = data_stream_time - ts_sent\nif (msg.data_type !== 'image') {\n    var ret_msg = {\n        \"payload\": [\n            {\n                \"time\": msg.timestamp,\n                \"data_sent_time\": ts_sent,\n                \"data_arrival_time\": msg.node_red_arrival_time,\n                \"data_saved_time\": 0,\n                \"data_stream_time\": data_stream_time,\n                \"time_until_arrival\": diff,\n                \"time_until_stream\": diff_to_stream,\n                \"arrival_until_stream\": data_stream_time - msg.node_red_arrival_time,\n                \"msg_size\": msg.msg_size\n            },\n            {\n                \"ID\": msg._msgid,\n                \"device\": msg.measurement,\n                \"msg_size_tag\": msg.msg_size,\n                \"experiment\": msg.experiment,\n                \"message_type_tag\": \"text_numeric\",\n                \"run_tag\": global.get(msg.experiment).experiment.experiment_run_id\n            }\n        ],\n        \"measurement\": \"TEXT_TIMINGS\"\n    };\n}\nreturn ret_msg;\n\n","outputs":1,"noerr":0,"x":1220,"y":160,"wires":[["f6ea9cd8.11e15"]]},{"id":"102c388c.be1307","type":"inject","z":"e87fb0a3.9981f","name":"Reset valid experiments and run numbers","topic":"ADMIN_MDML/RESET_EXP_RUN_ID","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":320,"y":840,"wires":[["9ef31031.0276c"]]},{"id":"479811ce.3423f","type":"inject","z":"e87fb0a3.9981f","name":"Add new experiment ID with payload","topic":"ADMIN_MDML/EXPERIMENT","payload":"EVERBATT","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":300,"y":880,"wires":[["9ef31031.0276c"]]},{"id":"2579b5a.1ea694a","type":"inject","z":"e87fb0a3.9981f","name":"Reset experiment (must change topic)","topic":"MDML/TEST/RESET","payload":"{\"reset\":1,\"hard_reset\":1}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":210,"y":300,"wires":[["9a88ea43.6bc658"]]},{"id":"5c55b0db.f1d4b","type":"http in","z":"3665fcdd.57c5f4","name":"[get] /ESPIN_IMAGE","url":"/ESPIN_IMAGE","method":"get","upload":false,"swaggerDoc":"","x":1130,"y":280,"wires":[["4ddbd19.0de7a3"]]},{"id":"4ddbd19.0de7a3","type":"multipart-encoder","z":"3665fcdd.57c5f4","name":"","statusCode":"","ignoreMessages":true,"outputOneNew":false,"outputIfSingle":false,"outputIfAll":false,"globalHeaders":{"Content-Type":"multipart/x-mixed-replace;boundary=--myboundary","Connection":"keep-alive","Expires":"Fri, 01 Jan 1990 00:00:00 GMT","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache"},"partHeaders":{"Content-Type":"image/jpeg"},"destination":"all","highWaterMark":16384,"x":1300,"y":280,"wires":[[]]},{"id":"f6ea9cd8.11e15","type":"influxdb out","z":"b444b0d7.19cc9","influxdb":"85d62ac2.197038","name":"InfluxDB storage","measurement":"","precision":"","retentionPolicy":"","x":1410,"y":160,"wires":[]}]